import gradio as gr
import pandas as pd
import joblib
import os
import logging
from sentence_transformers import SentenceTransformer, util

# Configure logging
logging.basicConfig(level=logging.INFO)

# Initialize Sentence Transformer
embedding_model = SentenceTransformer("all-MiniLM-L6-v2")

# --- Load Models and Data ---
try:
    model = joblib.load("Optuna_1_xgb_model_credit_score.pkl")
    logging.info("Model loaded successfully")
except Exception as e:
    logging.error(f"Error loading model: {e}")
    raise

try:
    mortgages = pd.read_csv("MORTGAGE3.csv")
    mortgages['embedding'] = mortgages['product.description'].apply(
        lambda x: embedding_model.encode(str(x), convert_to_tensor=True)
    )
    logging.info("Mortgage data loaded successfully")
except Exception as e:
    logging.error(f"Error loading mortgage data: {e}")
    raise

# City density mapping
city_to_density = {
    "–ê–ª–º–∞—Ç—ã": 0.025,
    "–ù—É—Ä-–°—É–ª—Ç–∞–Ω": 0.020,
    "–®—ã–º–∫–µ–Ω—Ç": 0.018,
    "–ö–∞—Ä–∞–≥–∞–Ω–¥–∞": 0.010,
    "–ê–∫—Ç–æ–±–µ": 0.008,
    "–î—Ä—É–≥–æ–µ": 0.005
}

# --- Categorical Encoding Mappings ---
CATEGORY_MAPPINGS = {
    "CODE_GENDER": {"M": 0, "F": 1},
    "FLAG_OWN_REALTY": {"Y": 1, "N": 0},
    "NAME_INCOME_TYPE": {
        "Working": 0,
        "State servant": 1,
        "Commercial associate": 2,
        "Student": 3
    },
    "NAME_FAMILY_STATUS": {
        "Married": 0,
        "Single / not married": 1,
        "Civil marriage": 2,
        "Separated": 3,
        "Widow": 4
    },
    "NAME_EDUCATION_TYPE": {
        "Secondary / secondary special": 0,
        "Higher education": 1,
        "Incomplete higher": 2,
        "Lower secondary": 3,
        "Academic degree": 4
    },
    "CREDIT_ACTIVE": {
        "Active": 0,
        "Closed": 1,
        "Sold": 2,
        "Bad debt": 3
    },
    "CREDIT_TYPE": {
        "Mortgage": 0
    },
    "ORG_TYPE_GROUPED": {
        "–ß–∞—Å—Ç–Ω–∞—è –∫–æ–º–ø–∞–Ω–∏—è": 0,
        "–ò–ü / –°–∞–º–æ–∑–∞–Ω—è—Ç—ã–π": 1,
        "–¢–æ—Ä–≥–æ–≤–∞—è –∫–æ–º–ø–∞–Ω–∏—è": 2,
        "–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω–∞—è –∫–æ–º–ø–∞–Ω–∏—è": 3,
        "–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–µ —É—á—Ä–µ–∂–¥–µ–Ω–∏–µ": 4,
        "–ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω–∞—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è": 5,
        "–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–∞—è –∫–æ–º–ø–∞–Ω–∏—è": 6,
        "–ì–æ—Å—Å–ª—É–∂–±—ã (–ø–æ–ª–∏—Ü–∏—è, –∞—Ä–º–∏—è –∏ —Ç.–¥.)": 7,
        "–®–∫–æ–ª–∞": 8,
        "–î–µ—Ç—Å–∫–∏–π —Å–∞–¥": 9,
        "–°—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ": 10,
        "–ë–∞–Ω–∫": 11,
        "–û—Ö—Ä–∞–Ω–∞": 12,
        "–ñ–ö–•": 13,
        "–ü–æ—á—Ç–∞": 14,
        "–°–µ–ª—å—Å–∫–æ–µ —Ö–æ–∑—è–π—Å—Ç–≤–æ": 15,
        "–†–µ—Å—Ç–æ—Ä–∞–Ω / –ö–∞—Ñ–µ": 16,
        "–°—Ñ–µ—Ä–∞ —É—Å–ª—É–≥": 17,
        "–£–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç / –∫–æ–ª–ª–µ–¥–∂": 18,
        "–≠–Ω–µ—Ä–≥–µ—Ç–∏–∫–∞": 19,
        "–¢–µ–ª–µ–∫–æ–º": 20,
        "–ì–æ—Å—Ç–∏–Ω–∏—Ü–∞": 21,
        "–°—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ": 22,
        "–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥ / –†–µ–∫–ª–∞–º–∞": 23,
        "–ò—Å–∫—É—Å—Å—Ç–≤–æ / –ö—É–ª—å—Ç—É—Ä–∞": 24,
        "–†–∏–µ–ª—Ç–æ—Ä": 25,
        "–Æ—Ä–∏—Å—Ç": 26,
        "–£–±–æ—Ä–∫–∞": 27,
        "–†–µ–ª–∏–≥–∏—è": 28,
        "–î—Ä—É–≥–æ–µ": 29
    },
    "OCCUPATION_TYPE_RU": {
        "–†–∞–∑–Ω–æ—Ä–∞–±–æ—á–∏–µ": 0,
        "–û—Å–Ω–æ–≤–Ω–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª": 1,
        "–¢–æ—Ä–≥–æ–≤—ã–π –ø–µ—Ä—Å–æ–Ω–∞–ª": 2,
        "–ú–µ–Ω–µ–¥–∂–µ—Ä—ã": 3,
        "–í–æ–¥–∏—Ç–µ–ª–∏": 4,
        "–í—ã—Å–æ–∫–æ–∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã": 5,
        "–ë—É—Ö–≥–∞–ª—Ç–µ—Ä—ã": 6,
        "–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π –ø–µ—Ä—Å–æ–Ω–∞–ª": 7,
        "–ü–æ–≤–∞—Ä": 8,
        "–û—Ö—Ä–∞–Ω–∞": 9,
        "–£–±–æ—Ä–∫–∞": 10,
        "–ß–∞—Å—Ç–Ω—ã–µ —É—Å–ª—É–≥–∏": 11,
        "–ù–∏–∑–∫–æ–∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–∞–±–æ—á–∏–µ": 12,
        "–°–µ–∫—Ä–µ—Ç–∞—Ä–∏": 13,
        "–û—Ñ–∏—Ü–∏–∞–Ω—Ç—ã / –±–∞—Ä–º–µ–Ω—ã": 14,
        "–ê–≥–µ–Ω—Ç—ã –ø–æ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏": 15,
        "HR": 16,
        "IT-—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã": 17
    }
}

def preprocess_inputs(input_dict):
    """Convert categorical inputs to numerical values"""
    processed = input_dict.copy()
    for col, mapping in CATEGORY_MAPPINGS.items():
        if col in processed:
            processed[col] = mapping.get(processed[col], -1)  # -1 for unknown categories
    return processed

def predict_credit_score(
    CODE_GENDER,
    FLAG_OWN_REALTY,
    NAME_INCOME_TYPE,
    NAME_FAMILY_STATUS,
    NAME_EDUCATION_TYPE,
    CREDIT_ACTIVE,
    CREDIT_TYPE,
    ORG_TYPE_GROUPED,
    OCCUPATION_TYPE_RU,
    CNT_CHILDREN,
    CNT_FAM_MEMBERS,
    CNT_CREDIT_PROLONG,
    AMT_INCOME_TOTAL,
    AMT_CREDIT,
    AMT_ANNUITY,
    AGE_YEARS,
    EMPLOYMENT_YEARS,
    CITY,
    LOAN_DURATION,
    ANNUITY_INCOME_RATIO
):
    try:
        # --- Preprocess Inputs ---
        input_dict = {
            "CODE_GENDER": CODE_GENDER,
            "FLAG_OWN_REALTY": FLAG_OWN_REALTY,
            "NAME_INCOME_TYPE": NAME_INCOME_TYPE,
            "NAME_FAMILY_STATUS": NAME_FAMILY_STATUS,
            "NAME_EDUCATION_TYPE": NAME_EDUCATION_TYPE,
            "CREDIT_ACTIVE": CREDIT_ACTIVE,
            "CREDIT_TYPE": CREDIT_TYPE,
            "ORG_TYPE_GROUPED": ORG_TYPE_GROUPED,
            "OCCUPATION_TYPE_RU": OCCUPATION_TYPE_RU,
            "CNT_CHILDREN": CNT_CHILDREN,
            "CNT_FAM_MEMBERS": CNT_FAM_MEMBERS,
            "CNT_CREDIT_PROLONG": CNT_CREDIT_PROLONG,
            "AMT_INCOME_TOTAL": AMT_INCOME_TOTAL,
            "AMT_CREDIT": AMT_CREDIT,
            "AMT_ANNUITY": AMT_ANNUITY,
            "DAYS_BIRTH": -int(AGE_YEARS * 365),
            "DAYS_EMPLOYED": -int(EMPLOYMENT_YEARS * 365),
            "REGION_POPULATION_RELATIVE": city_to_density.get(CITY, 0.005),
            "LOAN_DURATION": LOAN_DURATION,
            "ANNUITY_INCOME_RATIO": ANNUITY_INCOME_RATIO
        }
        
        # Apply categorical encoding
        processed_input = preprocess_inputs(input_dict)
        
       # Create DataFrame
        client_df = pd.DataFrame([processed_input])
        
        # Ensure numeric dtypes (updated without errors parameter)
        client_df = client_df.apply(pd.to_numeric)
        
        # Reorder columns to match training data
        CORRECT_FEATURE_ORDER = [
            'CODE_GENDER', 'FLAG_OWN_REALTY', 'CNT_CHILDREN', 'AMT_INCOME_TOTAL',
            'AMT_CREDIT', 'AMT_ANNUITY', 'NAME_INCOME_TYPE', 'NAME_EDUCATION_TYPE',
            'NAME_FAMILY_STATUS', 'REGION_POPULATION_RELATIVE', 'DAYS_BIRTH',
            'DAYS_EMPLOYED', 'CNT_FAM_MEMBERS', 'CREDIT_ACTIVE', 'CREDIT_TYPE',
            'CNT_CREDIT_PROLONG', 'LOAN_DURATION', 'ANNUITY_INCOME_RATIO',
            'ORG_TYPE_GROUPED', 'OCCUPATION_TYPE_RU'
        ]
        client_df = client_df[CORRECT_FEATURE_ORDER]
        
        # Debug output
        logging.info(f"Processed DataFrame columns:\n{client_df.columns.tolist()}")
        
                # –ü—Ä–æ–≥–Ω–æ–∑ –º–æ–¥–µ–ª–∏
        approval_prob = model.predict_proba(client_df)[0][1]  # –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ–¥–æ–±—Ä–µ–Ω–∏—è
        credit_score = int(300 + approval_prob * 700)  # —à–∫–∞–ª–∞ –æ—Ç 300 –¥–æ 1000

        # --- –ü–æ–∏—Å–∫ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∏–ø–æ—Ç–µ–∫ ---
        client_profile = f"{NAME_INCOME_TYPE}, {NAME_FAMILY_STATUS}, {NAME_EDUCATION_TYPE}, {OCCUPATION_TYPE_RU}"
        client_embedding = embedding_model.encode(client_profile, convert_to_tensor=True)

        mortgages["similarity"] = mortgages["embedding"].apply(
            lambda x: util.cos_sim(x, client_embedding).item()
        )

        top_matches = (
            mortgages.sort_values("similarity", ascending=False)
            .groupby('product.name')  # –∏—Å–∫–ª—é—á–∏–º –¥—É–±–ª–∏–∫–∞—Ç—ã
            .first()
            .head(3)
            .reset_index()
        )

        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
        if top_matches.empty:
            recs = "‚ö†Ô∏è –ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∏–ø–æ—Ç–µ–∫"
        else:
            formatted_recs = []
            for _, row in top_matches.iterrows():
                name = row['product.name']
                desc = str(row['product.description'])[:100].strip(" .") + "..."
                sim_score = row['similarity'] * 100
                url = row.get("product.company.website", "#")
                formatted_recs.append(f"**[{name}]({url})**\n–°–æ–≤–ø–∞–¥–µ–Ω–∏–µ: {sim_score:.1f}%\n_{desc}_")
            recs = "\n\n".join(formatted_recs)

        return (
            f"üí≥ **–ö—Ä–µ–¥–∏—Ç–Ω—ã–π —Å–∫–æ—Ä–∏–Ω–≥:** {credit_score}\n"
            f"üìà **–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ–¥–æ–±—Ä–µ–Ω–∏—è:** {approval_prob * 100:.1f}%\n\n"
            f"üè† **–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –∏–ø–æ—Ç–µ—á–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã:**\n\n{recs}"
        )
    
    
    except Exception as e:
        logging.error(f"Prediction error: {e}", exc_info=True)
        return f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}"

# --- Gradio Interface ---
inputs = [
    gr.Radio(["M", "F"], label="–ü–æ–ª (CODE_GENDER)"),
    gr.Radio(["Y", "N"], label="–ï—Å—Ç—å –ª–∏ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å? (FLAG_OWN_REALTY)"),
    gr.Radio(
        ["Working", "State servant", "Commercial associate", "Student"], 
        label="–¢–∏–ø –∑–∞–Ω—è—Ç–æ—Å—Ç–∏ (NAME_INCOME_TYPE)"
    ),
    gr.Radio(
        ["Married", "Single / not married", "Civil marriage", "Separated", "Widow"], 
        label="–°–µ–º–µ–π–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ (NAME_FAMILY_STATUS)"
    ),
    gr.Radio(
        ["Secondary / secondary special", "Higher education", "Incomplete higher", "Lower secondary", "Academic degree"], 
        label="–£—Ä–æ–≤–µ–Ω—å –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è (NAME_EDUCATION_TYPE)"
    ),
    gr.Radio(
        ["Active", "Closed", "Sold", "Bad debt"], 
        label="–¢–∏–ø –∫—Ä–µ–¥–∏—Ç–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (CREDIT_ACTIVE)"
    ),
    gr.Radio(["Mortgage"], label="–¢–∏–ø –∫—Ä–µ–¥–∏—Ç–∞ (CREDIT_TYPE)"),
    gr.Dropdown(
        list(CATEGORY_MAPPINGS["ORG_TYPE_GROUPED"].keys()), 
        label="–¢–∏–ø –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ (ORG_TYPE_GROUPED)"
    ),
    gr.Dropdown(
        list(CATEGORY_MAPPINGS["OCCUPATION_TYPE_RU"].keys()), 
        label="–ü—Ä–æ—Ñ–µ—Å—Å–∏—è (OCCUPATION_TYPE_RU)"
    ),
    gr.Number(label="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ—Ç–µ–π (CNT_CHILDREN)", value=0),
    gr.Number(label="–†–∞–∑–º–µ—Ä —Å–µ–º—å–∏ (CNT_FAM_MEMBERS)", value=1),
    gr.Number(label="–ü—Ä–æ–¥–ª–µ–≤–∞–ª–∏ –ª–∏ –≤—ã –∫—Ä–µ–¥–∏—Ç? (CNT_CREDIT_PROLONG)", value=0),
    gr.Number(label="–û–±—â–∏–π –¥–æ—Ö–æ–¥ –≤ –º–µ—Å—è—Ü (AMT_INCOME_TOTAL)", value=100000),
    gr.Number(label="–°—É–º–º–∞ –∫—Ä–µ–¥–∏—Ç–∞ (AMT_CREDIT)", value=1000000),
    gr.Number(label="–ê–Ω–Ω—É–∏—Ç–µ—Ç (AMT_ANNUITY)", value=50000),
    gr.Number(label="–í–æ–∑—Ä–∞—Å—Ç (–ª–µ—Ç)", value=30),
    gr.Number(label="–°—Ç–∞–∂ —Ä–∞–±–æ—Ç—ã (–ª–µ—Ç)", value=5),
    gr.Dropdown(list(city_to_density.keys()), label="–ì–æ—Ä–æ–¥", value="–ê–ª–º–∞—Ç—ã"),
    gr.Number(label="–°—Ä–æ–∫ –∫—Ä–µ–¥–∏—Ç–∞ (–≤ –º–µ—Å—è—Ü–∞—Ö)", value=240),
    gr.Number(label="–°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –∞–Ω–Ω—É–∏—Ç–µ—Ç–∞ –∫ –¥–æ—Ö–æ–¥—É", value=0.5)
]

demo = gr.Interface(
    fn=predict_credit_score,
    inputs=inputs,
    outputs=gr.Textbox(label="–†–µ–∑—É–ª—å—Ç–∞—Ç", lines=10),
    title="üí≥ –ê–Ω–∫–µ—Ç–∞ –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è —Å–∫–æ—Ä–∏–Ω–≥–∞",
    description="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –∞–Ω–∫–µ—Ç—É –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –∫—Ä–µ–¥–∏—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏.",
    flagging_options=None
)

if __name__ == "__main__":
    demo.launch(share=True)